generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid()) @map("_id")
  email              String             @unique
  name               String
  image              String?
  hashedPassword     String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  posts              Post[]
  savedPosts         Bookmark[]
  categories         Category[]
  followedCategories CategoryFollower[]
  Account            Account[]
  emailVerified      DateTime?
  comments           Comment[]
}

model Account {
  id                String    @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.String
  access_token      String?   @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.String
  session_state     String?
  emailVerified     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id         String     @id @default(uuid()) @map("_id")
  title      String
  content    String
  image      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  authorId   String
  author     User       @relation(fields: [authorId], references: [id])
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  savedPosts Bookmark[]
  comments   Comment[]

  @@index([categoryId])
}

model Category {
  id          String             @id @default(uuid()) @map("_id")
  name        String
  posts       Post[]
  description String
  authorId    String
  author      User               @relation(fields: [authorId], references: [id])
  followers   CategoryFollower[]
}

model Bookmark {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model CategoryFollower {
  id         String   @id @default(uuid()) @map("_id")
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  followedAt DateTime @default(now())

  @@unique([userId, categoryId])
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
}
